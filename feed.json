{
    "version": "https://jsonfeed.org/version/1",
    "title": "Get Rusty While Building a Database",
    "description": "",
    "home_page_url": "https://nihaocami.github.io/get-rusty-while-building-a-database",
    "feed_url": "https://nihaocami.github.io/get-rusty-while-building-a-database/feed.json",
    "user_comment": "",
    "icon": "https://nihaocami.github.io/get-rusty-while-building-a-database/media/website/rust-db.png",
    "author": {
        "name": "Chris Amirani"
    },
    "items": [
        {
            "id": "https://nihaocami.github.io/get-rusty-while-building-a-database/2-adding-a-storage-module.html",
            "url": "https://nihaocami.github.io/get-rusty-while-building-a-database/2-adding-a-storage-module.html",
            "title": "#2: Adding a Storage Module",
            "summary": "Now that we have got our project up and running, let's actually implement the first piece we'll need to store data. To do that, I made aÂ storage.rsÂ file in myÂ /srcÂ directory. This will be our storage module that we'll import later to use. Just like many other&hellip;",
            "content_html": "<p>Now that we have got our project up and running, let's actually implement the first piece we'll need to store data.Â </p>\n<p>To do that, I made aÂ <strong>storage.rsÂ </strong>file in myÂ <strong>/srcÂ </strong>directory. This will be our storage <span style=\"color: #02192b;\">module</span> that we'll import later to use. Just like many other programming languages, Rust comes with its own standard library that has many useful tools.</p>\n<p>The one tool we're interested in today isÂ <code>HashMap</code>. You can import it like this:</p>\n<pre class=\"language-rust\"><code>use std::collections::HashMap;</code></pre>\n<p>We use theÂ <strong>use</strong> keyword to import modules. In this case, we are HashMap from collections in standard library.</p>\n<p>A HashMap, as the name suggests, can be used to store things like key/value pair in memory. In addition to that, it has built-in functions likeÂ <code>.get()</code><strong>Â </strong>orÂ <code>.remove()</code> that'll make our life easier.</p>\n<p>Next, we want to define how our data will be stored. For the time being, let's say we want to store key/value pairs in a field calledÂ <strong>data</strong>. We can define the structure like this:</p>\n<pre class=\"language-rust\"><code>struct Database {\n    data: HashMap&lt;String, String&gt;,\n}</code></pre>\n<p>TheÂ <strong>struct</strong> keyword tells Rust we want to define a data structure and call itÂ <strong>Database</strong>. In that struct, we want to have a field calledÂ <strong>data</strong> which is an instance of the HashMap we imported. This HashMap will have key of typeÂ <strong>StringÂ </strong>and a value of typeÂ <strong>String</strong>. We will change this in the future.</p>\n<p>Now let's implement the basic methods/functions to do some CRUD operations on the database. In Rust, we can define the functionalities a struct can expect, in this case, we want to let Rust know that ourÂ <code>Database</code> struct will have 4 functions ofÂ <code>new</code><strong>, </strong><code>insert</code><strong>, </strong><code>get</code><strong>, </strong><code>delete</code><strong>.</strong></p>\n<pre class=\"language-rust\"><code>impl Database {\n    pub fn new() {}\n\n    pub fn insert() {}\n\n    pub fn get() {}\n\n    pub fn delete(){}\n}</code></pre>\n<p>Here we used theÂ <code>impl</code> keyword to define the struct functionalities and defined the skeleton of our functions. TheÂ <code>fn</code><strong>Â </strong>keyword is used to define a function and theÂ <strong>pub</strong> keyword tells Rust this function is public, meaning it can be called outside of the implementation.</p>\n<p>Now let's define theÂ <code>new</code><strong>Â </strong>function:</p>\n<pre class=\"language-rust\"><code>    pub fn new() -&gt; Self {\n        Database {\n            data: HashMap::new(),\n        }\n    }</code></pre>\n<p>This function is simple. TheÂ <code>-&gt; Self</code><strong>Â </strong>is just defining the return type of the function. SinceÂ <code>Self</code><strong>Â </strong> is within the context ofÂ <code>Database</code>, the return type will be of typeÂ <code>Database</code>. That makes sense since within the function we are initializing an instance of theÂ <code>Database</code>Â struct and theÂ <code>data</code> field is also getting initialized with new function fromÂ <code>HashMap</code>.</p>\n<p>Notice that we don't have to tell Rust explicitly to <strong>return</strong> the initialized Database. In Rust, the last expression is returned by default.</p>\n<p>Now that we can initialize a database, let's enable the \"C\" in \"CRUD\". Our <strong>insert</strong> function:</p>\n<pre class=\"language-rust\"><code>    pub fn insert(&amp;mut self, key: String, value: String) {\n        self.data.insert(key, value);\n    }</code></pre>\n<p><code>self</code> represents the instance of the <code>Database</code> struct on which the method is called. <code>&amp;mut self</code> is a <strong>mutable reference</strong> to the instance, allowing the method to modify its state (in this case, the <code>data</code> field).</p>\n<p>If you used <code>&amp;self</code>, the method would only have read access and couldn't modify the <code>Database</code>. If you used <code>self</code> (without <code>&amp;</code>), the method would <strong>take ownership</strong> of the <code>Database</code>, making it unusable outside the method unless explicitly returned.</p>\n<p><code>self.data</code> accesses the <code>data</code> field of the <code>Database</code> instance, which is a <code>HashMap&lt;String, String&gt;</code>. The <code>insert</code> method of <code>HashMap</code> is called to add or update an entry with the provided <code>key</code> and <code>value</code>.</p>\n<p>For the next two functions, most of what was explained above applies. Here's how they'll look like:</p>\n<pre class=\"language-rust\"><code>    pub fn get(&amp;self, key: &amp;str) -&gt; Option&lt;&amp;String&gt; {\n        self.data.get(key)\n    }\n\n    pub fn delete(&amp;mut self, key: &amp;str) -&gt; Option&lt;String&gt; {\n        self.data.remove(key)\n    }</code></pre>\n<p>Notice that they have slightly different return types.</p>\n<p><code>Option&lt;&amp;String&gt;</code> means it returns <code>Some(&amp;String)</code> if the key exists in the <code>HashMap</code>and <code>None</code> if the key does not exist.</p>\n<p>The <code>&amp;String</code> is a <strong>borrowed reference</strong> to the value stored in the <code>HashMap</code>. This avoids ownership transfer. The caller can read the value but cannot modify it. The value remains owned by the <code>HashMap</code>, ensuring safe access while preserving ownership.</p>\n<p>For the delete function, <code>Option&lt;String&gt;</code> means it returns <code>Some(String)</code> if the key exists, containing the <strong>owned value</strong> that was associated with the key and it returns <code>None</code> if the key does not exist.</p>\n<p>The <code>String</code> is <strong>moved out</strong> of the <code>HashMap</code> and returned to the caller. This means the ownership of the value is transferred to the caller. That makes sense since after deletion, the HashMap really shouldn't keep track of/ be associated with the delete value.</p>\n<p>Voila! We're done with implementation of the in memory storage. This will help us manage the stage of our data. In the upcoming blogs we'll see how we can use these functions.Â </p>\n<p>Â </p>",
            "author": {
                "name": "Chris Amirani"
            },
            "tags": [
            ],
            "date_published": "2024-12-24T10:18:26-08:00",
            "date_modified": "2024-12-27T09:02:05-08:00"
        },
        {
            "id": "https://nihaocami.github.io/get-rusty-while-building-a-database/1-setting-up-a-new-rust-project.html",
            "url": "https://nihaocami.github.io/get-rusty-while-building-a-database/1-setting-up-a-new-rust-project.html",
            "title": "#1: Setting Up a New Rust Project",
            "summary": "Hopefully by now you're all setup and ready to build. Let's start simple and just setup our project. If you have installed Rust correctly. You should start by running the following command: cargo init rusty-db In our case, we called our project rusty-db, but you&hellip;",
            "content_html": "<p>Hopefully by now you're all setup and ready to build. Let's start simple and just setup our project.</p>\n<p>If you have installed Rust correctly. You should start by running the following command:</p>\n<pre class=\"language-bash\"><code>cargo init rusty-db</code></pre>\n<p>In our case, we called our project rusty-db, but you can name it whatever you want. This command should generate the following directory for you.</p>\n<pre class=\"language-apacheconf\"><code>ðŸ“¦rusty-db\n â”£ ðŸ“‚src\n â”ƒ â”— ðŸ“œmain.rs\n â”— ðŸ“œCargo.toml</code></pre>\n<p>The <strong><em>Cargo.tomlÂ </em></strong>file includes your project settings including version, dependencies, name etc. At this point you can ignore that until we need it later.</p>\n<p>Now let's take a look atÂ <em><strong>main.rsÂ </strong></em></p>\n<pre class=\"language-rust\"><code>fn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre>\n<p>Here we see aÂ <strong>mainÂ </strong>function defined using theÂ <strong>fn </strong>keyword. In Rust, like some other programming languages, your application needs a \"main\" entry point and without it, your program won't compile.</p>\n<p>In our main function you can see that we are trying to print \"Hello, world!\" to our standard output. TheÂ <strong>println!()Â </strong>function is more powerful than the simple usage here. We will be using that more later.</p>\n<p>Now let's compile our program. You can do this in several ways and depending on your needs.</p>\n<p>If you just want to quickly run your application to validate it:</p>\n<pre class=\"language-bash\"><code>cargo run</code></pre>\n<p>This will build and compile your program. If you just want to build, but not run it:</p>\n<pre class=\"language-bash\"><code>cargo build</code></pre>\n<p>You can also use the following to build your program:</p>\n<pre class=\"language-bash\"><code>rustc &lt;PATH_TO_MAIN.RS&gt;</code></pre>\n<p>Although I don't recommend that if you're just starting out. Cargo is generally the more \"friendly\" way to go.</p>\n<p>One last thing, if you prefer to use you're editor to run your application, I am sure you can find an extension for it. Since I use VS Code, I use the <a href=\"https://rust-analyzer.github.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rust Analyzer</a> extension which provides tons of features including build/run.</p>\n<p>After running one of the above commands, you should now see an executable file built for your system. If you run that file through your command line, you should see the classic:</p>\n<pre class=\"language-bash\"><code>Hello, world!</code></pre>\n<p>Hooray! now that you're all set up, in the next chapter, we start to actually implement the db.Â </p>\n<p>Stay tuned :)</p>",
            "author": {
                "name": "Chris Amirani"
            },
            "tags": [
            ],
            "date_published": "2024-12-08T09:19:48-08:00",
            "date_modified": "2024-12-08T17:34:44-08:00"
        },
        {
            "id": "https://nihaocami.github.io/get-rusty-while-building-a-database/preface.html",
            "url": "https://nihaocami.github.io/get-rusty-while-building-a-database/preface.html",
            "title": "#0: Words That Need To Be Said",
            "summary": "I have a motto. If you want to learn something very well, teach it - Some wise person Well, not exactly mine. But it is something I heard long time ago and it has proven to be true time and time again. So, as much&hellip;",
            "content_html": "<p>I have a motto.</p>\n<blockquote>\n<p>If you want to learn something very well, teach it - Some wise person</p>\n</blockquote>\n<p>Well, not exactly mine. But it is something I heard long time ago and it has proven to be true time and time again. So, as much as I am making this as a contribution to Rust and Rust learners, it is also a selfish endeavour to learn more myself.</p>\n<p>In this series, I will be making a simple \"lite\" database like SQLite from scratch. Though I am aiming to build a NoSql version. Building a database is no simple task and it's a project that I am hoping to keep going for years to come.</p>\n<p>While doing this, we will be learning things as simple as defining functions in Rust and as advanced as handling multithreading, memory management and more. I should note that this won't be a \"intro to programming\" series and I assume you already have some fundamental understanding of programming concepts.</p>\n<p>I hope you find these posts useful and that it can help you in your journey to becoming Rusty.</p>",
            "author": {
                "name": "Chris Amirani"
            },
            "tags": [
            ],
            "date_published": "2024-12-06T08:27:32-08:00",
            "date_modified": "2024-12-08T17:38:05-08:00"
        }
    ]
}
