<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Get Rusty While Building a Database</title>
    <link href="https://nihaocami.github.io/get-rusty-while-building-a-database/feed.xml" rel="self" />
    <link href="https://nihaocami.github.io/get-rusty-while-building-a-database" />
    <updated>2024-12-08T17:38:05-08:00</updated>
    <author>
        <name>Chris A.</name>
    </author>
    <id>https://nihaocami.github.io/get-rusty-while-building-a-database</id>

    <entry>
        <title>#1: Setting Up a New Rust Project</title>
        <author>
            <name>Chris A.</name>
        </author>
        <link href="https://nihaocami.github.io/get-rusty-while-building-a-database/1-setting-up-a-new-rust-project.html"/>
        <id>https://nihaocami.github.io/get-rusty-while-building-a-database/1-setting-up-a-new-rust-project.html</id>

        <updated>2024-12-08T09:19:48-08:00</updated>
            <summary>
                <![CDATA[
                    Hopefully by now you're all setup and ready to build. Let's start simple and just setup our project. If you have installed Rust correctly. You should start by running the following command: cargo init rusty-db In our case, we called our project rusty-db, but you&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Hopefully by now you're all setup and ready to build. Let's start simple and just setup our project.</p>
<p>If you have installed Rust correctly. You should start by running the following command:</p>
<pre class="language-bash"><code>cargo init rusty-db</code></pre>
<p>In our case, we called our project rusty-db, but you can name it whatever you want. This command should generate the following directory for you.</p>
<pre class="language-apacheconf"><code>ðŸ“¦rusty-db
 â”£ ðŸ“‚src
 â”ƒ â”— ðŸ“œmain.rs
 â”— ðŸ“œCargo.toml</code></pre>
<p>The <strong><em>Cargo.tomlÂ </em></strong>file includes your project settings including version, dependencies, name etc. At this point you can ignore that until we need it later.</p>
<p>Now let's take a look atÂ <em><strong>main.rsÂ </strong></em></p>
<pre class="language-rust"><code>fn main() {
    println!("Hello, world!");
}
</code></pre>
<p>Here we see aÂ <strong>mainÂ </strong>function defined using theÂ <strong>fn </strong>keyword. In Rust, like some other programming languages, your application needs a "main" entry point and without it, your program won't compile.</p>
<p>In our main function you can see that we are trying to print "Hello, world!" to our standard output. TheÂ <strong>println!()Â </strong>function is more powerful than the simple usage here. We will be using that more later.</p>
<p>Now let's compile our program. You can do this in several ways and depending on your needs.</p>
<p>If you just want to quickly run your application to validate it:</p>
<pre class="language-bash"><code>cargo run</code></pre>
<p>This will build and compile your program. If you just want to build, but not run it:</p>
<pre class="language-bash"><code>cargo build</code></pre>
<p>You can also use the following to build your program:</p>
<pre class="language-bash"><code>rustc &lt;PATH_TO_MAIN.RS&gt;</code></pre>
<p>Although I don't recommend that if you're just starting out. Cargo is generally the more "friendly" way to go.</p>
<p>One last thing, if you prefer to use you're editor to run your application, I am sure you can find an extension for it. Since I use VS Code, I use the <a href="https://rust-analyzer.github.io" target="_blank" rel="nofollow noopener noreferrer">Rust Analyzer</a> extension which provides tons of features including build/run.</p>
<p>After running one of the above commands, you should now see an executable file built for your system. If you run that file through your command line, you should see the classic:</p>
<pre class="language-bash"><code>Hello, world!</code></pre>
<p>Hooray! now that you're all set up, in the next chapter, we start to actually implement the db.Â </p>
<p>Stay tuned :)</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>#0: Words That Need To Be Said</title>
        <author>
            <name>Chris A.</name>
        </author>
        <link href="https://nihaocami.github.io/get-rusty-while-building-a-database/preface.html"/>
        <id>https://nihaocami.github.io/get-rusty-while-building-a-database/preface.html</id>

        <updated>2024-12-06T08:27:32-08:00</updated>
            <summary>
                <![CDATA[
                    I have a motto. If you want to learn something very well, teach it - Some wise person Well, not exactly mine. But it is something I heard long time ago and it has proven to be true time and time again. So, as much&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>I have a motto.</p>
<blockquote>
<p>If you want to learn something very well, teach it - Some wise person</p>
</blockquote>
<p>Well, not exactly mine. But it is something I heard long time ago and it has proven to be true time and time again. So, as much as I am making this as a contribution to Rust and Rust learners, it is also a selfish endeavour to learn more myself.</p>
<p>In this series, I will be making a simple "lite" database like SQLite from scratch. Though I am aiming to build a NoSql version. Building a database is no simple task and it's a project that I am hoping to keep going for years to come.</p>
<p>While doing this, we will be learning things as simple as defining functions in Rust and as advanced as handling multithreading, memory management and more. I should note that this won't be a "intro to programming" series and I assume you already have some fundamental understanding of programming concepts.</p>
<p>I hope you find these posts useful and that it can help you in your journey to becoming Rusty.</p>
            ]]>
        </content>
    </entry>
</feed>
